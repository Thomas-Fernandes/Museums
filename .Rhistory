#La variable étudiée est le nombre de convives elle est de type quantitative discrète
mode <- max(restaurant$nb.convives)
mediane <- median(restaurant$nb.convives)
moyenne <- mean(restaurant$nb.convives)
restaurant$nb.convives <- factor(restaurant$nb.convives, levels = 1:5)
effectifs <- table(restaurant$nb.convives)
#Il n'y pas de var1 = 5, avec une fréquence de 0, on la rajoute
effectifs <- c(effectifs, 0)
barplot(effectifs,
main = "Distribution du nombre de convives",
xlab = "Nombre de convives",
ylab = "Effectifs",
space = 20)
restaurant <- data.frame(
nb.convives = c(1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6)
)
population <- nrow(restaurant)
effectif.total <- sum(restaurant$nb.convives)
#La variable étudiée est le nombre de convives elle est de type quantitative discrète
mode <- max(restaurant$nb.convives)
mediane <- median(restaurant$nb.convives)
moyenne <- mean(restaurant$nb.convives)
restaurant$nb.convives <- factor(restaurant$nb.convives, levels = 1:6)
effectifs <- table(restaurant$nb.convives)
#Il n'y pas de var1 = 5, avec une fréquence de 0, on la rajoute
effectifs <- c(effectifs, 0)
barplot(effectifs,
main = "Distribution du nombre de convives",
xlab = "Nombre de convives",
ylab = "Effectifs",
space = 20)
View(restaurant)
effectifs
restaurant <- data.frame(
nb.convives = c(1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6)
)
population <- nrow(restaurant)
effectif.total <- sum(restaurant$nb.convives)
#La variable étudiée est le nombre de convives elle est de type quantitative discrète
mode <- max(restaurant$nb.convives)
mediane <- median(restaurant$nb.convives)
moyenne <- mean(restaurant$nb.convives)
restaurant$nb.convives <- factor(restaurant$nb.convives, levels = 1:6)
effectifs <- table(restaurant$nb.convives)
barplot(effectifs,
main = "Distribution du nombre de convives",
xlab = "Nombre de convives",
ylab = "Effectifs",
space = 20)
restaurant <- data.frame(
nb.convives = c(1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6)
)
population <- nrow(restaurant)
effectif.total <- sum(restaurant$nb.convives)
#La variable étudiée est le nombre de convives elle est de type quantitative discrète
mode <- max(restaurant$nb.convives)
mediane <- median(restaurant$nb.convives)
moyenne <- mean(restaurant$nb.convives)
restaurant$nb.convives <- factor(restaurant$nb.convives, levels = 1:6)
effectifs <- table(restaurant$nb.convives)
barplot(effectifs,
main = "Distribution du nombre de convives",
xlab = "Nombre de convives",
ylab = "Effectifs",
space = 20)
box()
restaurant <- data.frame(
nb.convives = c(1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6)
)
population <- nrow(restaurant)
effectif.total <- sum(restaurant$nb.convives)
#La variable étudiée est le nombre de convives elle est de type quantitative discrète
mode <- max(restaurant$nb.convives)
mediane <- median(restaurant$nb.convives)
moyenne <- mean(restaurant$nb.convives)
restaurant$nb.convives <- factor(restaurant$nb.convives, levels = 1:6)
effectifs <- table(restaurant$nb.convives)
barplot(effectifs,
main = "Distribution du nombre de convives",
xlab = "Nombre de convives",
ylab = "Effectifs",
ylim = c(0, 6),
space = 20)
box()
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
View(tabac)
View(tabac)
View(tabac)
View(tabac)
View(tabac)
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
#Ajout d'une variable fumeur de type binaire
tabac$fumeur <- ifelse(tabac$tabac == "oui", 1, 0)
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
#Ajout d'une variable fumeur de type binaire
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
View(tabac)
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
#Calculer les fréquences observées pour les modalités des variables "fumeur" et "problème pulmonaire"
freq.fumeur <- table(tabac$fumeur)
freq.pulmonaire <- table(tabac$problème_pulmonaire)
freq.fumeur
freq.pulmonaire
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
#Calculer les fréquences observées pour les modalités des variables "fumeur" et "problème pulmonaire"
freq.fumeur <- table(tabac$fumeur)
freq.pulmonaire <- table(tabac$probleme_pulmonaire)
freq.pulmonaire <- table(tabac$probleme_pulmonaire)
freq.pulmonaire
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
#Calculer les fréquences observées pour les modalités des variables "fumeur" et "problème pulmonaire"
freq.fumeur <- table(tabac$fumeur)
freq.pulmonaire <- table(tabac$probleme_pulmonaire)
#représenter les distributions de proportions de ces variables
barplot(freq.fumeur,
main = "Distribution du tabagisme passif",
xlab = "Tabagisme passif",
ylab = "Effectifs",
ylim = c(0, 6),
space = 20)
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
#Calculer les fréquences observées pour les modalités des variables "fumeur" et "problème pulmonaire"
freq.fumeur <- table(tabac$fumeur)
freq.pulmonaire <- table(tabac$probleme_pulmonaire)
#représenter les distributions de proportions de ces variables
prop <- prop.table(freq.fumeur)
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
#Calculer les fréquences observées pour les modalités des variables "fumeur" et "problème pulmonaire"
freq.fumeur <- table(tabac$fumeur)
freq.pulmonaire <- table(tabac$probleme_pulmonaire)
#représenter les distributions de proportions de ces variables
prop <- prop.table(freq.fumeur)
prop
View(tabac)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
attach(tabac)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
rm(list=ls())
tabac <- read.csv("D:/Documents/Drive/Ecole/M1/S1/Analyse de données/Analyse univariée/tabac.csv", header = TRUE, sep = ",")
attach(tabac)
head(tabac)
str(tabac)
dim(tabac)
summary(tabac)
tabac$fumeur <- tabac$tabac > 0
# Fréquences
#Fréquences de fumeurs (TRUE = nombre de fumeurs, FALSE = nombre de non fumeurs):")
table(tabac$fumeur)
#Fréquences de problèmes pulmonaires (TRUE = nombre de personnes avec problèmes pulmonaires, FALSE = nombre de personnes sans problèmes pulmonaires):
table(tabac$probleme_pulmonaire)
# Proportions
#Proportions de fumeurs (TRUE = proportion de fumeurs, FALSE = proportion de non fumeurs):
table(tabac$fumeur)/nrow(tabac)
# Proportions de problèmes pulmonaires (TRUE = proportion de personnes avec problèmes pulmonaires, FALSE = proportion de personnes sans problèmes pulmonaires):
table(tabac$probleme_pulmonaire)/nrow(tabac)
# Barplot des proportions
proportions <- matrix(c(1 - sum(tabac$fumeur) / nrow(tabac), sum(tabac$fumeur) / nrow(tabac),
1 - sum(tabac$probleme_pulmonaire) / nrow(tabac), sum(tabac$probleme_pulmonaire) / nrow(tabac)),
nrow = 2, ncol = 2)
# Barplot avec toutes les barres sur le même graphique
barplot(as.vector(proportions),
main = "Proportions de : fumeurs, personnes avec problèmes pulmonaires",
xlab = "Catégories",
ylab = "Proportion",
ylim = c(0, 1),
space = 5,
width = c(0.01, 0.01, 0.01, 0.01),
col = c("#6262e3", "#6262e3", "#50977d", "#50977d"),
names.arg = c("Non fumeur", "Fumeur", "Sans pb pul.", "Avec pb pul."),
cex.names = 0.8)
# Ajouter des légendes pour indiquer les groupes de barres
legend("topright", legend = c("Fumeur", "Problème pulmonaire"), fill = c("#6262e3", "#50977d"))
attach(tabac)
paste("Il y a", sum((tabac$fumeur)/nrow(tabac))*100, "% de fumeurs")
prop.test(table(fumeur), conf.level=0.95)
prop.test(sum(tabac$fumeur), nrow(tabac), conf.level=0.95)
# H0 : p = 0.5
# H1 : p < 0.5
# alpha = 0.05
# Test bilatéral de proportion
prop.test(sum(tabac$fumeur), nrow(tabac), p = 0.5, alternative = "less", conf.level=0.95)
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(table_co)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence /colSums(table_contingence))
x <- c(10, 20)
y <- c(30, 40)
table(x, y)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
conditional_fumeur <- prop.table(table_contingence, margin=1)
conditional_fumeur
-table_contingence
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- t(table_contingence) / colSums(t(table_contingence)))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- table_contingence / colSums(t(table_contingence)))
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- table_contingence / colSums(t(table_contingence)))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- table_contingence / colSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
rm(list=ls())
tabac <- read.csv("D:/Documents/Drive/Ecole/M1/S1/Analyse de données/Analyse univariée/tabac.csv", header = TRUE, sep = ",")
attach(tabac)
head(tabac)
str(tabac)
dim(tabac)
summary(tabac)
tabac$fumeur <- tabac$tabac > 0
# Fréquences
#Fréquences de fumeurs (TRUE = nombre de fumeurs, FALSE = nombre de non fumeurs):")
table(tabac$fumeur)
#Fréquences de problèmes pulmonaires (TRUE = nombre de personnes avec problèmes pulmonaires, FALSE = nombre de personnes sans problèmes pulmonaires):
table(tabac$probleme_pulmonaire)
# Proportions
#Proportions de fumeurs (TRUE = proportion de fumeurs, FALSE = proportion de non fumeurs):
table(tabac$fumeur)/nrow(tabac)
# Proportions de problèmes pulmonaires (TRUE = proportion de personnes avec problèmes pulmonaires, FALSE = proportion de personnes sans problèmes pulmonaires):
table(tabac$probleme_pulmonaire)/nrow(tabac)
# Barplot des proportions
proportions <- matrix(c(1 - sum(tabac$fumeur) / nrow(tabac), sum(tabac$fumeur) / nrow(tabac),
1 - sum(tabac$probleme_pulmonaire) / nrow(tabac), sum(tabac$probleme_pulmonaire) / nrow(tabac)),
nrow = 2, ncol = 2)
# Barplot avec toutes les barres sur le même graphique
barplot(as.vector(proportions),
main = "Proportions de : fumeurs, personnes avec problèmes pulmonaires",
xlab = "Catégories",
ylab = "Proportion",
ylim = c(0, 1),
space = 5,
width = c(0.01, 0.01, 0.01, 0.01),
col = c("#6262e3", "#6262e3", "#50977d", "#50977d"),
names.arg = c("Non fumeur", "Fumeur", "Sans pb pul.", "Avec pb pul."),
cex.names = 0.8)
# Ajouter des légendes pour indiquer les groupes de barres
legend("topright", legend = c("Fumeur", "Problème pulmonaire"), fill = c("#6262e3", "#50977d"))
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
plot(factor(fumeur), factor(probleme_pulmonaire), xlab="fumeur",ylab="probleme pulmonaire")
# Analogue
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
plot(factor(fumeur), factor(probleme_pulmonaire), xlab="fumeur",ylab="probleme pulmonaire")
# Distribution conditionnelle de fumeur sachant problème pulmonaire
barplot(table(tabac$fumeur, tabac$probleme_pulmonaire) / sum(tabac$probleme_pulmonaire),
main = "Distribution conditionnelle de fumeur sachant problème pulmonaire",
xlab = "Fumeur",
ylab = "Proportion",
ylim = c(0, 2),
space = 5,
width = c(0.01, 0.01),
col = c("#6262e3", "#50977d"),
names.arg = c("Non fumeur", "Fumeur"),
cex.names = 0.8)
# Distribution conditionnelle de problème pulmonaire sachant fumeur
barplot(table(tabac$fumeur, tabac$probleme_pulmonaire) / sum(tabac$fumeur),
main = "Distribution conditionnelle de problème pulmonaire sachant fumeur",
xlab = "Problème pulmonaire",
ylab = "Proportion",
ylim = c(0, 2),
space = 5,
width = c(0.01, 0.01),
col = c("#6262e3", "#50977d"),
names.arg = c("Sans pb pul.", "Avec pb pul."),
cex.names = 0.8)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
plot(x = factor(fumeur), y = factor(probleme_pulmonaire), xlab="fumeur",ylab="probleme pulmonaire")
View(tabac)
t((distrib_conditionnelle_2 <- table_contingence/ colSums(table_contingence)))
install.packages("RMySQL")
??rmysql
install.packages("DBI")
library(DBI)
library(RMySQL)
con <- dbConnect(RMySQL::MySQL(),
dbname = "Museums_upgotears",
host = "o0l.h.filess.io",
user = "Museums_upgotears",
password = "b5fddcd21215fa5b713630fa0170d9fdf9d490a2")
con <- dbConnect(RMySQL::MySQL(),
dbname = "Museums_upgotears",
host = "o0l.h.filess.io",
user = "Museums_upgotears",
password = "b5fddcd21215fa5b713630fa0170d9fdf9d490a2",
port = 3307)
View(con)
resultats <- dbGetQuery(con, "SELECT * FROM etat")
View(resultats)
library(DBI)
library(RMySQL)
login <- dbConnect(RMySQL::MySQL(),
dbname = "Museums_upgotears",
host = "o0l.h.filess.io",
user = "Museums_upgotears",
password = "b5fddcd21215fa5b713630fa0170d9fdf9d490a2",
port = 3307)
resultats <- dbGetQuery(login, "SELECT * FROM region")
dbDisconnect(con)
dbDisconnect(login)
View(login)
resultats <- dbGetQuery(login, "SELECT * FROM region")
View(resultats)
shiny::runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
library(sf)
data <- st_read("C:/Users/thoma/Downloads/population-francaise-par-departement-2018.geojson")
View(data)
header <- readRDS("C:/Users/thoma/Downloads/header.rds")
View(header)
header
header <- readRDS("C:/Users/thoma/Downloads/header(1).rds")
header
install.packages("rayshader")
rm(header)
data
data <- st_transform(data, crs = 2154)  # Lambert-93
data
library(raster)
rast <- rasterize(data, field = "population", ...)
raster_template <- raster(extent(data), nrow=100, ncol=100)
projection(raster_template) <- crs(data)
rast <- rasterize(data, raster_template, field="population", fun=mean)
plot(rast)
data
View(data)
library(dplyr)
data <- data %>%
filter(code_departement > 95)
View(data)
library(sf)
library(dplyr)
data <- st_read("C:/Users/thoma/Downloads/population-francaise-par-departement-2018.geojson")
data <- st_transform(data, crs = 2154)  # Lambert-93
data <- data %>%
filter(code_departement < 95)
View(data)
library(raster)
raster_template <- raster(extent(data), nrow=100, ncol=100)
projection(raster_template) <- crs(data)
rast <- rasterize(data, raster_template, field="population", fun=mean)
plot(rast)
View(data)
gc()
library(sf)
library(dplyr)
data <- st_read("C:/Users/thoma/Downloads/population-francaise-par-departement-2018.geojson")
data <- st_transform(data, crs = 2154)  # Lambert-93
data <- data %>%
filter(code_departement <= 95)
library(raster)
raster_template <- raster(extent(data), nrow=100, ncol=100)
projection(raster_template) <- crs(data)
rast <- rasterize(data, raster_template, field="population", fun=mean)
plot(rast)
mat <- as.matrix(rast)
mat
mat <- matrix(rast, nrow = ncol(rast), ncol = nrow(rast))
mat
View(mat)
mat <- as.matrix(rast)
View(mat)
mat %>%
sphere_shade(texture = "desert") -> shade
library(rayshader)
mat %>%
sphere_shade(texture = "desert") -> shade
shade %>%
plot_3d(mat, zscale = 10, windowsize = c(1000, 800))
rgl::rgl.snapshot("C:/Users/thoma/Downloads/mon_image_3d.png")
rgl::rgl.close()
gc()
summary(mat)
library(sf)
library(dplyr)
data <- st_read("C:/Users/thoma/Downloads/population-francaise-par-departement-2018.geojson")
data <- st_transform(data, crs = 2154)  # Lambert-93
data <- data %>%
filter(code_departement <= 95)
library(raster)
raster_template <- raster(extent(data), nrow=100, ncol=100)
projection(raster_template) <- crs(data)
rast <- rasterize(data, raster_template, field="population", fun=mean)
plot(rast)
library(rayshader)
mat <- as.matrix(rast)
summary(mat)
mat %>%
sphere_shade(texture = "desert") -> shade
shade
shade %>%
plot_3d(mat, zscale = 10, windowsize = c(800, 600))
library(rayshader)
volcano %>%
sphere_shade() %>%
plot_3d(volcano, zscale = 10, windowsize = c(800, 600))
rgl::rgl.clear()
rgl::rgl.reset()
shade %>%
plot_3d(mat, zscale = 10, windowsize = c(800, 600))
summary(mat)
# Normalisation
mat <- (mat - min(mat, na.rm = TRUE)) / (max(mat, na.rm = TRUE) - min(mat, na.rm = TRUE))
# Ou standardisation
mat <- scale(mat, center = TRUE, scale = TRUE)
# Normalisation
mat <- (mat - min(mat, na.rm = TRUE)) / (max(mat, na.rm = TRUE) - min(mat, na.rm = TRUE))
# Ou standardisation
mat <- scale(mat, center = TRUE, scale = TRUE)
mat %>%
sphere_shade(texture = "desert") %>%
plot_3d(mat, zscale = 10, windowsize = c(800, 600))
setwd("C:/Users/thoma/Desktop/Github/Museums")
