restaurant$nb.convives <- factor(restaurant$nb.convives, levels = 1:6)
effectifs <- table(restaurant$nb.convives)
barplot(effectifs,
main = "Distribution du nombre de convives",
xlab = "Nombre de convives",
ylab = "Effectifs",
space = 20)
box()
restaurant <- data.frame(
nb.convives = c(1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6)
)
population <- nrow(restaurant)
effectif.total <- sum(restaurant$nb.convives)
#La variable étudiée est le nombre de convives elle est de type quantitative discrète
mode <- max(restaurant$nb.convives)
mediane <- median(restaurant$nb.convives)
moyenne <- mean(restaurant$nb.convives)
restaurant$nb.convives <- factor(restaurant$nb.convives, levels = 1:6)
effectifs <- table(restaurant$nb.convives)
barplot(effectifs,
main = "Distribution du nombre de convives",
xlab = "Nombre de convives",
ylab = "Effectifs",
ylim = c(0, 6),
space = 20)
box()
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
View(tabac)
View(tabac)
View(tabac)
View(tabac)
View(tabac)
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
#Ajout d'une variable fumeur de type binaire
tabac$fumeur <- ifelse(tabac$tabac == "oui", 1, 0)
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
#Ajout d'une variable fumeur de type binaire
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
View(tabac)
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
#Calculer les fréquences observées pour les modalités des variables "fumeur" et "problème pulmonaire"
freq.fumeur <- table(tabac$fumeur)
freq.pulmonaire <- table(tabac$problème_pulmonaire)
freq.fumeur
freq.pulmonaire
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
#Calculer les fréquences observées pour les modalités des variables "fumeur" et "problème pulmonaire"
freq.fumeur <- table(tabac$fumeur)
freq.pulmonaire <- table(tabac$probleme_pulmonaire)
freq.pulmonaire <- table(tabac$probleme_pulmonaire)
freq.pulmonaire
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
#Calculer les fréquences observées pour les modalités des variables "fumeur" et "problème pulmonaire"
freq.fumeur <- table(tabac$fumeur)
freq.pulmonaire <- table(tabac$probleme_pulmonaire)
#représenter les distributions de proportions de ces variables
barplot(freq.fumeur,
main = "Distribution du tabagisme passif",
xlab = "Tabagisme passif",
ylab = "Effectifs",
ylim = c(0, 6),
space = 20)
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
#Calculer les fréquences observées pour les modalités des variables "fumeur" et "problème pulmonaire"
freq.fumeur <- table(tabac$fumeur)
freq.pulmonaire <- table(tabac$probleme_pulmonaire)
#représenter les distributions de proportions de ces variables
prop <- prop.table(freq.fumeur)
library(readr)
tabac <- read_csv("tabac.csv", show_col_types = FALSE)
head(tabac)
str(tabac)
summary(tabac)
tabac$fumeur <- ifelse(tabac$tabagisme_passif == TRUE, 1, 0)
#Calculer les fréquences observées pour les modalités des variables "fumeur" et "problème pulmonaire"
freq.fumeur <- table(tabac$fumeur)
freq.pulmonaire <- table(tabac$probleme_pulmonaire)
#représenter les distributions de proportions de ces variables
prop <- prop.table(freq.fumeur)
prop
View(tabac)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
attach(tabac)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
rm(list=ls())
tabac <- read.csv("D:/Documents/Drive/Ecole/M1/S1/Analyse de données/Analyse univariée/tabac.csv", header = TRUE, sep = ",")
attach(tabac)
head(tabac)
str(tabac)
dim(tabac)
summary(tabac)
tabac$fumeur <- tabac$tabac > 0
# Fréquences
#Fréquences de fumeurs (TRUE = nombre de fumeurs, FALSE = nombre de non fumeurs):")
table(tabac$fumeur)
#Fréquences de problèmes pulmonaires (TRUE = nombre de personnes avec problèmes pulmonaires, FALSE = nombre de personnes sans problèmes pulmonaires):
table(tabac$probleme_pulmonaire)
# Proportions
#Proportions de fumeurs (TRUE = proportion de fumeurs, FALSE = proportion de non fumeurs):
table(tabac$fumeur)/nrow(tabac)
# Proportions de problèmes pulmonaires (TRUE = proportion de personnes avec problèmes pulmonaires, FALSE = proportion de personnes sans problèmes pulmonaires):
table(tabac$probleme_pulmonaire)/nrow(tabac)
# Barplot des proportions
proportions <- matrix(c(1 - sum(tabac$fumeur) / nrow(tabac), sum(tabac$fumeur) / nrow(tabac),
1 - sum(tabac$probleme_pulmonaire) / nrow(tabac), sum(tabac$probleme_pulmonaire) / nrow(tabac)),
nrow = 2, ncol = 2)
# Barplot avec toutes les barres sur le même graphique
barplot(as.vector(proportions),
main = "Proportions de : fumeurs, personnes avec problèmes pulmonaires",
xlab = "Catégories",
ylab = "Proportion",
ylim = c(0, 1),
space = 5,
width = c(0.01, 0.01, 0.01, 0.01),
col = c("#6262e3", "#6262e3", "#50977d", "#50977d"),
names.arg = c("Non fumeur", "Fumeur", "Sans pb pul.", "Avec pb pul."),
cex.names = 0.8)
# Ajouter des légendes pour indiquer les groupes de barres
legend("topright", legend = c("Fumeur", "Problème pulmonaire"), fill = c("#6262e3", "#50977d"))
attach(tabac)
paste("Il y a", sum((tabac$fumeur)/nrow(tabac))*100, "% de fumeurs")
prop.test(table(fumeur), conf.level=0.95)
prop.test(sum(tabac$fumeur), nrow(tabac), conf.level=0.95)
# H0 : p = 0.5
# H1 : p < 0.5
# alpha = 0.05
# Test bilatéral de proportion
prop.test(sum(tabac$fumeur), nrow(tabac), p = 0.5, alternative = "less", conf.level=0.95)
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(table_co)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence /colSums(table_contingence))
x <- c(10, 20)
y <- c(30, 40)
table(x, y)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
conditional_fumeur <- prop.table(table_contingence, margin=1)
conditional_fumeur
-table_contingence
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- t(table_contingence) / colSums(t(table_contingence)))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- table_contingence / colSums(t(table_contingence)))
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- table_contingence / colSums(t(table_contingence)))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- table_contingence / colSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
rm(list=ls())
tabac <- read.csv("D:/Documents/Drive/Ecole/M1/S1/Analyse de données/Analyse univariée/tabac.csv", header = TRUE, sep = ",")
attach(tabac)
head(tabac)
str(tabac)
dim(tabac)
summary(tabac)
tabac$fumeur <- tabac$tabac > 0
# Fréquences
#Fréquences de fumeurs (TRUE = nombre de fumeurs, FALSE = nombre de non fumeurs):")
table(tabac$fumeur)
#Fréquences de problèmes pulmonaires (TRUE = nombre de personnes avec problèmes pulmonaires, FALSE = nombre de personnes sans problèmes pulmonaires):
table(tabac$probleme_pulmonaire)
# Proportions
#Proportions de fumeurs (TRUE = proportion de fumeurs, FALSE = proportion de non fumeurs):
table(tabac$fumeur)/nrow(tabac)
# Proportions de problèmes pulmonaires (TRUE = proportion de personnes avec problèmes pulmonaires, FALSE = proportion de personnes sans problèmes pulmonaires):
table(tabac$probleme_pulmonaire)/nrow(tabac)
# Barplot des proportions
proportions <- matrix(c(1 - sum(tabac$fumeur) / nrow(tabac), sum(tabac$fumeur) / nrow(tabac),
1 - sum(tabac$probleme_pulmonaire) / nrow(tabac), sum(tabac$probleme_pulmonaire) / nrow(tabac)),
nrow = 2, ncol = 2)
# Barplot avec toutes les barres sur le même graphique
barplot(as.vector(proportions),
main = "Proportions de : fumeurs, personnes avec problèmes pulmonaires",
xlab = "Catégories",
ylab = "Proportion",
ylim = c(0, 1),
space = 5,
width = c(0.01, 0.01, 0.01, 0.01),
col = c("#6262e3", "#6262e3", "#50977d", "#50977d"),
names.arg = c("Non fumeur", "Fumeur", "Sans pb pul.", "Avec pb pul."),
cex.names = 0.8)
# Ajouter des légendes pour indiquer les groupes de barres
legend("topright", legend = c("Fumeur", "Problème pulmonaire"), fill = c("#6262e3", "#50977d"))
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
plot(factor(fumeur), factor(probleme_pulmonaire), xlab="fumeur",ylab="probleme pulmonaire")
# Analogue
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
plot(factor(fumeur), factor(probleme_pulmonaire), xlab="fumeur",ylab="probleme pulmonaire")
# Distribution conditionnelle de fumeur sachant problème pulmonaire
barplot(table(tabac$fumeur, tabac$probleme_pulmonaire) / sum(tabac$probleme_pulmonaire),
main = "Distribution conditionnelle de fumeur sachant problème pulmonaire",
xlab = "Fumeur",
ylab = "Proportion",
ylim = c(0, 2),
space = 5,
width = c(0.01, 0.01),
col = c("#6262e3", "#50977d"),
names.arg = c("Non fumeur", "Fumeur"),
cex.names = 0.8)
# Distribution conditionnelle de problème pulmonaire sachant fumeur
barplot(table(tabac$fumeur, tabac$probleme_pulmonaire) / sum(tabac$fumeur),
main = "Distribution conditionnelle de problème pulmonaire sachant fumeur",
xlab = "Problème pulmonaire",
ylab = "Proportion",
ylim = c(0, 2),
space = 5,
width = c(0.01, 0.01),
col = c("#6262e3", "#50977d"),
names.arg = c("Sans pb pul.", "Avec pb pul."),
cex.names = 0.8)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
plot(x = factor(fumeur), y = factor(probleme_pulmonaire), xlab="fumeur",ylab="probleme pulmonaire")
View(tabac)
t((distrib_conditionnelle_2 <- table_contingence/ colSums(table_contingence)))
install.packages("RMySQL")
??rmysql
install.packages("DBI")
library(DBI)
library(RMySQL)
con <- dbConnect(RMySQL::MySQL(),
dbname = "Museums_upgotears",
host = "o0l.h.filess.io",
user = "Museums_upgotears",
password = "b5fddcd21215fa5b713630fa0170d9fdf9d490a2")
con <- dbConnect(RMySQL::MySQL(),
dbname = "Museums_upgotears",
host = "o0l.h.filess.io",
user = "Museums_upgotears",
password = "b5fddcd21215fa5b713630fa0170d9fdf9d490a2",
port = 3307)
View(con)
resultats <- dbGetQuery(con, "SELECT * FROM etat")
View(resultats)
library(DBI)
library(RMySQL)
login <- dbConnect(RMySQL::MySQL(),
dbname = "Museums_upgotears",
host = "o0l.h.filess.io",
user = "Museums_upgotears",
password = "b5fddcd21215fa5b713630fa0170d9fdf9d490a2",
port = 3307)
resultats <- dbGetQuery(login, "SELECT * FROM region")
dbDisconnect(con)
dbDisconnect(login)
View(login)
resultats <- dbGetQuery(login, "SELECT * FROM region")
View(resultats)
shiny::runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
setwd("C:/Users/thoma/Desktop/Github/Museums")
library(readr)
library(readxl)
library(dplyr)
library(stringr)
#------------------#
# Importation data #
#------------------#
museums <- read_csv("Data/Raw/museums.csv")
#------------------------#
# Traitement des données #
#------------------------#
# Dans le fichier museums, lorsque "State Code (FIPS)" = 60, on met 6, 80 on met 8 et 90 on met 9
museums$`State Code (FIPS)`[museums$`State Code (FIPS)` == 60] <- 6
museums$`State Code (FIPS)`[museums$`State Code (FIPS)` == 80] <- 8
museums$`State Code (FIPS)`[museums$`State Code (FIPS)` == 90] <- 9
#suppression des lignes sans locale code NCES
museums <- museums[!is.na(museums$`Locale Code (NCES)`),]
#Suppression abréviations
state_abbreviations <- c('AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI',
'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI',
'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC',
'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT',
'VT', 'VA', 'WA', 'WV', 'WI', 'WY')
state_names <- c('ALABAMA', 'ALASKA', 'ARIZONA', 'ARKANSAS', 'CALIFORNIA', 'COLORADO',
'CONNECTICUT', 'DELAWARE', 'FLORIDA', 'GEORGIA', 'HAWAII', 'IDAHO',
'ILLINOIS', 'INDIANA', 'IOWA', 'KANSAS', 'KENTUCKY', 'LOUISIANA', 'MAINE',
'MARYLAND', 'MASSACHUSETTS', 'MICHIGAN', 'MINNESOTA', 'MISSISSIPPI', 'MISSOURI',
'MONTANA', 'NEBRASKA', 'NEVADA', 'NEW HAMPSHIRE', 'NEW JERSEY', 'NEW MEXICO',
'NEW YORK', 'NORTH CAROLINA', 'NORTH DAKOTA', 'OHIO', 'OKLAHOMA', 'OREGON',
'PENNSYLVANIA', 'RHODE ISLAND', 'SOUTH CAROLINA', 'SOUTH DAKOTA', 'TENNESSEE',
'TEXAS', 'UTAH', 'VERMONT', 'VIRGINIA', 'WASHINGTON', 'WEST VIRGINIA', 'WISCONSIN', 'WYOMING')
museums$`State (Administrative Location)` <- state_names[match(museums$`State (Administrative Location)`, state_abbreviations)]
#Traitement manuel des erreurs
museums$`State (Administrative Location)` <- ifelse(is.na(museums$`State (Administrative Location)`),
museums$`State (Physical Location)`,
museums$`State (Administrative Location)`)
museums$`State (Administrative Location)` <- ifelse(museums$`State Code (FIPS)` == 51, "VIRGINIA",
ifelse(museums$`State Code (FIPS)` == 13, "GEORGIA",
ifelse(museums$`State Code (FIPS)` == 11, "DISTRICT OF COLUMBIA",
ifelse(museums$`State Code (FIPS)` == 24, "MARYLAND",
ifelse(museums$`State Code (FIPS)` == 2, "ALASKA",
ifelse(museums$`State Code (FIPS)` == 11, "DISTRICT OF COLUMBIA",
museums$`State (Administrative Location)`))))))
museums <- museums[museums$`City (Administrative Location)` != "CHATSWORTH", ]
#Erreurs finances
museums <- museums[-which(museums$`Employer ID Number` == 113327144 & is.na(museums$`Tax Period`) & is.na(museums$`Income`) & is.na(museums$`Revenue`)), ]
museums <- museums[-which(museums$`Employer ID Number` == 232773714 & is.na(museums$`Tax Period`) & is.na(museums$`Income`) & is.na(museums$`Revenue`)), ]
museums <- museums[-which(museums$`Employer ID Number` == 912054439 & museums$`Tax Period` == 201406 & museums$`Income` == 0 & museums$`Revenue` == 0), ]
museums <- museums[-which(is.na(museums$`Employer ID Number`) & museums$`Tax Period` == 201412 & museums$`Income` == 14063 & museums$`Revenue` == 14063), ]
#Supression des lignes où Employer ID Number est NA
museums <- museums[!is.na(museums$`Employer ID Number`),]
#Tax Period (YYYYMM) en date (YYYY-MM-DD)
museums$`Tax Period` <- ifelse(!is.na(museums$`Tax Period`),
ifelse(substr(museums$`Tax Period`, 5, 6) == "02",
sprintf("%s-%s-28", substr(museums$`Tax Period`, 1, 4), substr(museums$`Tax Period`, 5, 6)),
sprintf("%s-%s-30", substr(museums$`Tax Period`, 1, 4), substr(museums$`Tax Period`, 5, 6))),
NA)
#-------------#
#   Tables    #
#-------------#
#type_musee
type_musee <- museums %>%
select(`Museum Type`) %>%
unique() %>%
rename(Nom_Type = `Museum Type`) %>%
mutate(ID_Type = row_number()) %>%
relocate(ID_Type, .before = 1)
#institution
institution <- museums %>%
filter(!is.na(`Institution Name`)) %>%
select(`Institution Name`) %>%
unique() %>%
rename(Nom_Institution = `Institution Name`) %>%
mutate(ID_Institution = row_number()) %>%
relocate(ID_Institution, .before = 1)
#type_environnement
type_environnement <- museums %>%
select(`Locale Code (NCES)`) %>%
unique() %>%
mutate(Nom_environnement = case_when(
`Locale Code (NCES)` == 1 ~ "City",
`Locale Code (NCES)` == 2 ~ "Suburb",
`Locale Code (NCES)` == 3 ~ "Town",
`Locale Code (NCES)` == 4 ~ "Rural"
)) %>%
rename(ID_environnement = `Locale Code (NCES)`)
#etat
etat <- read_csv("Data/Raw/State_Code_FIPS.csv") %>%
rename(`ID_State` = `Country-level FIPS code`,
`Nom` = `Place name`) %>%
mutate(ID_State = as.numeric(ID_State))
#Jointure pour y ajouter le region code (AAM), on récupère le code AAM depuis la table museums
etat <- etat %>%
left_join(museums %>% select(`State Code (FIPS)`, `Region Code (AAM)`) %>% unique(), by = c("ID_State" = "State Code (FIPS)")) %>%
rename(`RefRegion` = `Region Code (AAM)`)
#region
region <- museums %>%
select(`Region Code (AAM)`) %>%
unique() %>%
rename(`ID_Region` = `Region Code (AAM)`) %>%
mutate(Nom = case_when(
`ID_Region` == 1 ~ "New England",
`ID_Region` == 2 ~ "Mid-Atlantic",
`ID_Region` == 3 ~ "Southeastern",
`ID_Region` == 4 ~ "Midwest",
`ID_Region` == 5 ~ "Montain Plains",
`ID_Region` == 6 ~ "Western"
))
#ville
ville <- museums %>%
select(`City (Administrative Location)`, `State (Administrative Location)`) %>%
distinct() %>%
rename(Nom = `City (Administrative Location)`) %>%
mutate(RefEtat = etat$ID_State[match(`State (Administrative Location)`, etat$Nom)]) %>%
mutate(ID_Ville = row_number()) %>%
relocate(ID_Ville, .before = 1) %>%
select(-`State (Administrative Location)`)
#Zip_code
Zip_Code <- museums %>%
select(`Zip Code (Administrative Location)`, `City (Administrative Location)`, `State (Administrative Location)`) %>%
distinct() %>%
rename(ZIP_Code = `Zip Code (Administrative Location)`,
Ville = `City (Administrative Location)`) %>%
mutate(RefEtat = etat$ID_State[match(`State (Administrative Location)`, etat$Nom)]) %>%
mutate(RefVille = ville$ID_Ville[match(paste(Ville, RefEtat), paste(ville$Nom, ville$RefEtat))]) %>%
select(-`State (Administrative Location)`, -Ville, -RefEtat) %>%
distinct(ZIP_Code, .keep_all = TRUE)
#employeur
employeur <- museums %>%
select(`Employer ID Number`) %>%
distinct() %>%
rename(ID_employeur = `Employer ID Number`) %>%
mutate(Nom_Employeur = NA)
#finance
finance <- museums %>%
select(`Employer ID Number`, `Tax Period`, `Income`, `Revenue`) %>%
distinct() %>%
mutate(RefEmployer = employeur$ID_employeur[match(`Employer ID Number`, employeur$ID_employeur)]) %>%
select(-`Employer ID Number`) %>%
rename(Tax_Period = `Tax Period`,
Chiffre_Affaires = `Income`,
Benefice = `Revenue`) %>%
mutate(ID_Finance = row_number()) %>%
relocate(ID_Finance, .before = 1)
#musee
musee <- museums %>%
select(`Museum ID`, `Museum Name`, `Phone Number`, `Street Address (Administrative Location)`,
`Museum Type`, `Institution Name`, `Zip Code (Administrative Location)`, `Employer ID Number`,
`Latitude`, `Longitude`, `Locale Code (NCES)`) %>%
rename(ID_Musee = `Museum ID`,
Nom_musee = `Museum Name`,
Telephone = `Phone Number`,
Adresse = `Street Address (Administrative Location)`) %>%
mutate(RefType_musee = type_musee$ID_Type[match(`Museum Type`, type_musee$Nom_Type)]) %>%
select(-`Museum Type`) %>%
mutate(RefInstitution = institution$ID_Institution[match(`Institution Name`, institution$Nom_Institution)]) %>%
select(-`Institution Name`) %>%
mutate(RefZip_code = Zip_Code$ZIP_Code[match(`Zip Code (Administrative Location)`, Zip_Code$ZIP_Code)]) %>%
select(-`Zip Code (Administrative Location)`) %>%
mutate(RefEmployeur = employeur$ID_employeur[match(`Employer ID Number`, employeur$ID_employeur)]) %>%
select(-`Employer ID Number`) %>%
mutate(RefType_environnement = type_environnement$ID_environnement[match(`Locale Code (NCES)`, type_environnement$ID_environnement)]) %>%
select(-`Locale Code (NCES)`)
#Zip_code
write_csv(Zip_Code, "Data/Processed/zip_code.csv", na = "NULL")
